generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}


model User {
  id             String           @id @default(cuid())
  email          String           @unique
  password       String?
  name           String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  recipes        Recipe[]
  favorites      Recipe[]         @relation("UserFavorites")
  ingredients    Ingredient[] // Remove UserIngredient[] relation
  UserIngredient UserIngredient[]
  SavedItem      SavedItem[]
    accounts Account[]
  sessions Session[]
}

model Recipe {
  id           String             @id @default(cuid())
  name         String             // Recipe name
  description  String             // Recipe description
  imageUrl     String             // URL for the recipe image
  instructions String             // Cooking instructions
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  userId       String             // User who created the recipe
  user         User               @relation(fields: [userId], references: [id])
  ingredients  RecipeIngredient[] // Many-to-many relation with ingredients
  favoritedBy  User[]             @relation("UserFavorites") // Users who favorited this recipe
}

model RecipeIngredient {
  recipeId     String
  ingredientId String
  quantity     String
  recipe       Recipe     @relation(fields: [recipeId], references: [id])
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id])

  @@id([recipeId, ingredientId])
}

model UserIngredient {
  userId       String
  ingredientId String
  quantity     String
  user         User   @relation(fields: [userId], references: [id])

  @@id([userId, ingredientId])
}

model Ingredient {
  id                String             @id @default(cuid())
  name              String             // Ingredient name
  quantity          String             // Quantity of the ingredient
  expiryDate        DateTime?          // Optional expiry date
  purchaseDate      DateTime           @default(now()) // Purchase date
  categoryId        String             // Category ID
  userId            String?            // Optional user ID (for user-specific ingredients)
  category          Category           @relation(fields: [categoryId], references: [id])
  user              User?              @relation(fields: [userId], references: [id])
  recipeIngredients RecipeIngredient[] // Many-to-many relation with recipes
}

model Category {
  id          String       @id @default(cuid())
  name        String       @unique
  ingredients Ingredient[]
  SavedItem   SavedItem[]
}

model SavedItem {
  id         String   @id @default(cuid())
  name       String
  quantity   String
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String
  userId     String
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

